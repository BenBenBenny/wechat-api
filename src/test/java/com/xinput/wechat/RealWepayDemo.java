package com.xinput.wechat;import com.xinput.bleach.util.BuilderUtils;import com.xinput.bleach.util.JsonUtils;import com.xinput.bleach.util.Logs;import com.xinput.wechat.enums.AccountTypeEnum;import com.xinput.wechat.request.pay.DownloadFundflowRequest;import com.xinput.wechat.request.pay.QueryCommentReq;import com.xinput.wechat.response.pay.OrderQueryResponse;import com.xinput.wechat.response.pay.QueryCommentResp;import com.xinput.wechat.result.WechatFundFlowResult;import org.junit.Test;import org.slf4j.Logger;/** * @author <a href="mailto:xinput.xx@gmail.com">xinput</a> * @date 2020-09-27 11:20 */public class RealWepayDemo {    private static final Logger logger = Logs.get();    private static final String liJunOpenId = "o21I_5SGVI6QmukwPLVttYctCFEU";    private static final String out_trade_no = "5f646c8d280319c40fde6bf9";    private static final String TRANSACTION_ID = "4200000764202009188340047847";    @Test    public void queryOrder() throws Exception {        OrderQueryResponse response = WechatPayApi.orderQueryByTransaction(TRANSACTION_ID);        logger.info(JsonUtils.toJsonString(response, true));    }    @Test    public void queryOrder2() throws Exception {        OrderQueryResponse response = WechatPayApi.orderQueryByOutTradeNo(out_trade_no);        logger.info(JsonUtils.toJsonString(response, true));    }    @Test    public void queryComment() throws Exception {        QueryCommentReq req =                BuilderUtils.of(QueryCommentReq::new)                        .with(QueryCommentReq::setBegin_time, "20200906000000")                        .with(QueryCommentReq::setEnd_time, "20200925000000")                        .with(QueryCommentReq::setOffset, 0)                        .with(QueryCommentReq::setLimit, 10)                        .build();        QueryCommentResp resp = WechatPayApi.qeuryComment(req);        logger.info(JsonUtils.toJsonString(resp, true));    }    @Test    public void downloaFundflow() throws Exception {        DownloadFundflowRequest request = BuilderUtils.of(DownloadFundflowRequest::new)                .with(DownloadFundflowRequest::setBill_date, "20200918")                .with(DownloadFundflowRequest::setAccount_type, AccountTypeEnum.BASIC.getAccountType())                .build();        WechatFundFlowResult result = WechatPayApi.downloadFundflow(request);        logger.info(JsonUtils.toJsonString(result, true));    }}